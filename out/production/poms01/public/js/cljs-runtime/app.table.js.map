{"version":3,"sources":["app/table.cljc"],"mappings":";AAOA,AAMA,sBAAA,tBAAMA,oDAAWC,OAAOC;AAAxB,AACE,OAACC,+CAAO,WAAKC;AAAL,AAAU,GAAI,AAACC,uBAAOD;AAAZ;;AAEE,IAAME,MAAI,gFAAK,AAACC,eAAKH,rEAAK,kDAAA,lDAACI,1BAAcC;AAAzC,AACE,OAACC,+BAAcJ,IAAIL;;GACvCC;;AAEJ","names":["app.table/find-data","needle","haystack","cljs.core.filter","row","cljs.core/empty?","hay","cljs.core/vals","clojure.string.join","clojure.string/lower-case","clojure.string/includes?"],"sourcesContent":["(ns app.table\n  (:require\n   [hyperfiddle.electric :as e]\n   [hyperfiddle.electric-dom2 :as h]\n   [hyperfiddle.electric-ui4 :as ui]\n   [clojure.string :as str]))\n\n(e/def formatters {:euro #?(:cljs (e/client\n                                    (fn [v]\n                                      (-> (/ v 100)\n                                        (.toLocaleString \"de-DE\" (js-obj \"style\" \"currency\" \"currency\" \"EUR\")))))\n                            :clj identity)})\n\n(defn find-data [needle haystack]\n  (filter (fn [row] (if (empty? row)\n                      true\n                      (let [hay (->> (vals row) (str/join \" \") str/lower-case)]\n                        (str/includes? hay needle))))\n    haystack))\n\n(e/defn Table [data fields !per-page search? classes &slots]\n  (let [!search (atom \"\")\n        search (e/watch !search)\n        per-page (e/watch !per-page)\n        !items (atom (if (empty? search) (take per-page data) (take per-page (find-data search data))))\n        items (e/watch !items)\n        !sort-order (atom {:key nil :direction nil})\n        sort-order (e/watch !sort-order)]\n    (h/div (h/props {:class \"flex flex-wrap mx-4 my-3 gap-2 justify-start dark:text-gray-300\"})\n      (when search?\n        (ui/input search (e/fn [v] (reset! !search v))\n          (h/props {:type \"search\" :placeholder \"Type to search\"\n                    :class \"border dark:border-moon-700 dark:bg-moon-900 rounded-sm px-2 text-sm\"})))\n      (when (:controls &slots)\n        (e/for [control-fn (:controls &slots)]\n          (new control-fn))))\n\n    (h/table (h/props {:class (:table classes)})\n      (h/thead (h/props {:class (:thead classes)})\n        (e/for [key (keys fields)]\n          (let [sortable (-> fields key :sortable)\n                sort-reverse? (= key (:key sort-order))\n                th-class (str (when sortable \"hover:cursor-pointer \") \" \" (:th-class (key fields)) \" \" (:th classes))]\n            (println key)\n            (h/th\n              (h/props {:class th-class})\n              (when sortable\n                (h/on \"click\" (e/fn [_]\n                                (let [asc? (= \"asc\" (:direction sort-order))]\n                                  (reset! !items (sort-by key (if (and sort-reverse? asc?) > <) items))\n                                  (reset! !sort-order (assoc {} :key key :direction (if (and asc? sort-reverse?)\n                                                                                      \"desc\"\n                                                                                      \"asc\")))))))\n              (h/div (h/props {:class \"inline-flex no-wrap gap-1 items-center\"})\n                (h/span (h/text (str (get-in fields [key :label] (name key)))))\n                (h/span (h/props {:class (cond\n                                           (not sortable) \"\"\n                                           (and sort-reverse? (= \"asc\" (:direction sort-order))) \"flex i-mdi-chevron-up\"\n                                           (and sort-reverse? (= \"desc\" (:direction sort-order))) \"flex i-mdi-chevron-down\"\n                                           :else \"flex i-mdi-sort\")})))))))\n      (h/tbody\n        (e/for [row items]\n          (h/tr (h/props {:class (:tr classes)})\n            (e/for [[k v] row]\n              (let [fmt-key (:formatter (k fields))\n                    fmt (if fmt-key (fmt-key formatters) identity)\n                    td-class (str (:td classes) \" \" (:td-class (k fields)))]\n                (h/td\n                  (h/text (fmt v))\n                  (h/props {:class td-class}))))))))))\n"]}